const o="merged.wasm",M=async m=>new Promise((a,c)=>{const s=new Worker(new URL("/wasmoptim/assets/binaryen-worker-lblYwSi5.js",import.meta.url));s.addEventListener("message",async r=>{s.terminate();const{wasmFileAfter:t,error:i}=r.data;if(i){c(new Error(i));return}a({wasmFileAfter:t})}),s.postMessage({wasmFileBefore:m})});self.addEventListener("message",async m=>{try{const a=[],{default:c}=await import("./wasm-merge-7ok0ZlNP.js"),s=await c({print:()=>{},printErr:e=>a.push(e)});await s.ready;const{wasmFiles:r,uuids:t}=m.data,i=r.map(async(e,n)=>{const F=await e.arrayBuffer();s.FS.writeFile(t[n].replaceAll("/","_"),new Uint8Array(F))});await Promise.all(i);const w=r.map(e=>[e.webkitRelativePath||e.relativePath||e.name,e.name.replace(/\.wasm$/,"")]).flat(),l=Date.now(),u=[...w,"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",o+l];console.log(`Running wasm-merge ${u.join(" ")}`);const g=[...r.map((e,n)=>[t[n].replaceAll("/","_"),e.name.replace(/\.wasm$/,"")]).flat(),"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",o+l];if(s.callMain(g),a.length){self.postMessage({error:a.join(`
`)});return}const d=s.FS.readFile(o+l,{encoding:"binary"}),p=new File([d],o,{type:"application/wasm"});[...r.map((e,n)=>t[n].replaceAll("/","_")),o+l].forEach(s.FS.unlink),self.postMessage({status:{size:p.size}});const{wasmFileAfter:y,error:f}=await M(p);if(f){self.postMessage({error:f});return}self.postMessage({file:y})}catch(a){self.postMessage({error:a.message})}});
