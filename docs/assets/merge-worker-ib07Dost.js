const i="merged.wasm",M=async c=>new Promise((r,t)=>{const s=new Worker(new URL("/wasmoptim/assets/binaryen-worker-vGG0wOcy.js",import.meta.url));s.addEventListener("message",async a=>{s.terminate();const{wasmFileAfter:n,error:m}=a.data;return m?t(new Error(m)):r({wasmFileAfter:n})}),s.postMessage({wasmFileBefore:c})});self.addEventListener("message",async c=>{try{const{default:r}=await import("./wasm-merge-7ok0ZlNP.js"),t=[],s=await r({print:()=>{},printErr:e=>t.push(e)});await s.ready;const{wasmFiles:a,uuids:n}=c.data,m=a.map(async(e,o)=>{const F=await e.arrayBuffer();s.FS.writeFile(e.name+n[o],new Uint8Array(F))});await Promise.all(m);const w=a.map(e=>[e.name,e.name.replace(/\.wasm$/,"")]).flat(),l=Date.now(),u=[...w,"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",i+l];console.log("wasm-merge",u.join(" "));const g=[...a.map((e,o)=>[e.name+n[o],e.name.replace(/\.wasm$/,"")]).flat(),"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",i+l];if(s.callMain(g),t.length){self.postMessage({error:t.join(`
`)});return}const y=s.FS.readFile(i+l,{encoding:"binary"}),p=new File([y],i,{type:"application/wasm"});[...a.map((e,o)=>e.name+n[o]),i+l].forEach(s.FS.unlink),self.postMessage({status:{size:p.size}});const{wasmFileAfter:d,error:f}=await M(p);if(f){self.postMessage({error:f});return}self.postMessage({file:d})}catch(r){self.postMessage({error:r.message})}});
