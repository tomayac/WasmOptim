const i="merged.wasm",M=async c=>new Promise((t,a)=>{const s=new Worker(new URL("/wasmoptim/assets/binaryen-worker-qgpbsLcn.js",import.meta.url));s.addEventListener("message",async n=>{s.terminate();const{wasmFileAfter:r,error:m}=n.data;return m?a(new Error(m)):t({wasmFileAfter:r})}),s.postMessage({wasmFileBefore:c})});self.addEventListener("message",async c=>{try{const{default:t}=await import("./wasm-merge-lCF_iJz2.js"),{wasmFiles:a,uuids:s}=c.data,n=[],r=await t({print:()=>{},printErr:e=>n.push(e)}),m=a.map(async(e,o)=>{const F=await e.arrayBuffer();r.FS.writeFile(e.name+s[o],new Uint8Array(F))});await Promise.all(m);const w=a.map(e=>[e.name,e.name.replace(/\.wasm$/,"")]).flat(),l=Date.now(),u=[...w,"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",i+l];console.log("wasm-merge",u.join(" "));const g=[...a.map((e,o)=>[e.name+s[o],e.name.replace(/\.wasm$/,"")]).flat(),"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",i+l];if(r.callMain(g),n.length){self.postMessage({error:n.join(`
`)});return}const d=r.FS.readFile(i+l,{encoding:"binary"}),p=new File([d],i,{type:"application/wasm"});[...a.map((e,o)=>e.name+s[o]),i+l].forEach(r.FS.unlink),self.postMessage({status:{size:p.size}});const{wasmFileAfter:y,error:f}=await M(p);if(f){self.postMessage({error:f});return}self.postMessage({file:y})}catch(t){self.postMessage({error:t.message})}});
