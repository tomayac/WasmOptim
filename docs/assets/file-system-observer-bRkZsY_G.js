import{d as v,o as t,a as i,u as l,M as d,r as p,s as F,b as k}from"./index-Q6DBO2Sq.js";const g=new Set;let s=null;const H=async n=>{console.log(`File system changes detected  → ${n.map(o=>`${o.changedHandle.name} (${o.type})`).join(", ")}`.trim());let e=[];for(const o of n)if(o.type==="modified"){if(o.changedHandle instanceof FileSystemFileHandle){const r=await o.changedHandle.getFile();console.log(`File ${r.name} modified → Re-optimizing`),r.handle=o.changedHandle,e.push(r)}else if(o.changedHandle instanceof FileSystemDirectoryHandle){const r=o.changedHandle;let c=await p(r,!0);console.log(`Directory ${o.changedHandle.name} modified → Getting entries`),c=c.filter(a=>a.type==="application/wasm"||a.name.endsWith(".wasm")||a.name.endsWith(".wat")),e.push(...c);const f=Array.from(l.keys()),m=e.map(async a=>F?await a.handle.getUniqueId():a.name),u=await Promise.all(m);e=e.filter((a,b)=>{const y=u[b];return!f.includes(y)})}}e=[...new Set(e)],k(e)},h=()=>(s||(s=new FileSystemObserver(v(n=>{H(n)},250))),s);localStorage.getItem("observe-file-changes")!=="true"?t.checked=!1:t.checked=!0;localStorage.getItem("observe-directory-changes")!=="true"?i.checked=!1:i.checked=!0;t.parentNode.hidden=!1;t.addEventListener("change",()=>{if(localStorage.setItem("observe-file-changes",t.checked),t.checked){h();for(const[n,{handle:e}]of l.entries())n===d||!e||(s.observe(e),console.log(`File ${e.name} → Observing changes`));return}if(s)for(const[n,{handle:e}]of l.entries())n===d||!e||(s.unobserve(e),console.log(`File ${e.name} → No longer observing changes`))});i.parentNode.hidden=!1;i.addEventListener("change",()=>{if(localStorage.setItem("observe-directory-changes",i.checked),i.checked){h();for(const n of g)s.observe(n),console.log(`Directory ${n.name} → Observing changes`);return}if(s)for(const n of g)s.unobserve(n),console.log(`Directory ${n.name} → No longer observing changes`)});export{h as getFileSystemChangeObserver,g as observedDirectories};
