const M=async l=>new Promise((r,m)=>{const e=new Worker(new URL("/assets/binaryen-worker-wNMH2Mls.js",import.meta.url));e.addEventListener("message",async t=>{e.terminate();const{wasmFileAfter:n,error:a}=t.data;if(a){m(new Error(a));return}r({wasmFileAfter:n})}),e.postMessage({wasmFileBefore:l})});self.addEventListener("message",async l=>{try{const r=[],{default:m}=await import("./wasm-merge-XJypaZaX.js"),e=await m({print:()=>{},printErr:s=>r.push(s)});await e.ready;const{wasmFiles:t,uuids:n,fileName:a}=l.data,f=t.map(async(s,o)=>{const F=await s.arrayBuffer();e.FS.writeFile(n[o].replaceAll("/","_"),new Uint8Array(F))});await Promise.all(f);const w=t.map(s=>[s.name,s.name.replace(/\.wasm$/,"")]).flat(),i=Date.now(),u=[...w,"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",a+i];console.log(`Running wasm-merge ${u.join(" ")}`);const g=[...t.map((s,o)=>[n[o].replaceAll("/","_"),s.name.replace(/\.wasm$/,"")]).flat(),"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",a+i];if(e.callMain(g),r.length){self.postMessage({error:r.join(`
`)});return}const y=e.FS.readFile(a+i,{encoding:"binary"}),c=new File([y],a,{type:"application/wasm"});[...t.map((s,o)=>n[o].replaceAll("/","_")),a+i].forEach(e.FS.unlink),self.postMessage({status:{size:c.size}});const{wasmFileAfter:d,error:p}=await M(c);if(p){self.postMessage({error:p});return}self.postMessage({file:d})}catch(r){self.postMessage({error:r.message})}});
