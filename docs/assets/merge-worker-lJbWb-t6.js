const o="merged.wasm",M=async m=>new Promise((a,c)=>{const e=new Worker(new URL("/wasmoptim/assets/binaryen-worker-rNu5qeOs.js",import.meta.url));e.addEventListener("message",async r=>{e.terminate();const{wasmFileAfter:t,error:i}=r.data;if(i){c(new Error(i));return}a({wasmFileAfter:t})}),e.postMessage({wasmFileBefore:m})});self.addEventListener("message",async m=>{try{const a=[],{default:c}=await import("./wasm-merge-8-L7zcsj.js"),e=await c({print:()=>{},printErr:s=>a.push(s)});await e.ready;const{wasmFiles:r,uuids:t}=m.data,i=r.map(async(s,n)=>{const F=await s.arrayBuffer();e.FS.writeFile(t[n].replaceAll("/","_"),new Uint8Array(F))});await Promise.all(i);const w=r.map(s=>[s.name,s.name.replace(/\.wasm$/,"")]).flat(),l=Date.now(),u=[...w,"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",o+l];console.log(`Running wasm-merge ${u.join(" ")}`);const g=[...r.map((s,n)=>[t[n].replaceAll("/","_"),s.name.replace(/\.wasm$/,"")]).flat(),"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",o+l];if(e.callMain(g),a.length){self.postMessage({error:a.join(`
`)});return}const d=e.FS.readFile(o+l,{encoding:"binary"}),p=new File([d],o,{type:"application/wasm"});[...r.map((s,n)=>t[n].replaceAll("/","_")),o+l].forEach(e.FS.unlink),self.postMessage({status:{size:p.size}});const{wasmFileAfter:y,error:f}=await M(p);if(f){self.postMessage({error:f});return}self.postMessage({file:y})}catch(a){self.postMessage({error:a.message})}});
