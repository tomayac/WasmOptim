const m=async r=>{const{default:a}=await import("./wasm-opt-eQxQP9iz.js"),e=await a({print:()=>{},printErr:n=>r.push(n)});return await e.ready,e};self.addEventListener("message",async r=>{const a=[],e=await m(a),{wasmFileBefore:n,uniqueId:t}=r.data;try{const s=await n.arrayBuffer();e.FS.writeFile(t,new Uint8Array(s));const o=[t,"-o",t,"-Os","--always-inline-max-function-size","--enable-reference-types","--enable-multimemory","--converge"],i=[n.name,"-o",n.name,"-Os","--always-inline-max-function-size","--enable-reference-types","--enable-multimemory","--converge"];if(console.log(`Running wasm-opt ${i.join(" ")}`),e.callMain(o),a.length>0)throw new Error(a.join(". "));const l=e.FS.readFile(t,{encoding:"binary"});e.FS.unlink(t);const c=new File([l],n.name,{type:"application/wasm"});self.postMessage({wasmFileAfter:c})}catch(s){self.postMessage({error:s.message})}});
