const F=async n=>new Promise((a,s)=>{const e=new Worker(new URL("/assets/wasm-opt-worker-BRsbEtNJ.js",import.meta.url));e.addEventListener("message",async o=>{e.terminate();const{wasmFileAfter:r,error:l}=o.data;if(l){s(new Error(l));return}a({wasmFileAfter:r})}),e.postMessage({wasmFileBefore:n,uniqueId:crypto.randomUUID()})}),M=async n=>{const{default:a}=await import("./wasm-merge-NcqgLKYM.js"),s=await a({print:()=>{},printErr:e=>n.push(e)});return await s.ready,s};self.addEventListener("message",async n=>{try{const a=[],s=await M(a),{wasmFiles:e,uuids:o,fileName:r}=n.data,l=e.map(async(t,i)=>{const y=await t.arrayBuffer();s.FS.writeFile(o[i].replaceAll("/","_"),new Uint8Array(y))});await Promise.all(l);const w=e.map(t=>[t.name,t.name.replace(/\.wasm$/,"")]).flat(),m=Date.now(),f=[...w,"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",r];console.log(`Running wasm-merge ${f.join(" ")}`);const u=[...e.map((t,i)=>[o[i].replaceAll("/","_"),t.name.replace(/\.wasm$/,"")]).flat(),"--rename-export-conflicts","--enable-multimemory","--enable-reference-types","-o",r+m];if(s.callMain(u),a.length>0)throw new Error(a.join(`
`));const g=s.FS.readFile(r+m,{encoding:"binary"}),c=new File([g],r,{type:"application/wasm"});[...e.map((t,i)=>o[i].replaceAll("/","_")),r+m].forEach(s.FS.unlink),self.postMessage({status:{size:c.size}});const{wasmFileAfter:d,error:p}=await F(c);if(p){self.postMessage({error:p});return}self.postMessage({file:d})}catch(a){self.postMessage({error:a.message})}});
